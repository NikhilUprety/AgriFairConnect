// <auto-generated />
using System;
using AgriFairConnect.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AgriFairConnect.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250830115224_AddAiScoreField")]
    partial class AddAiScoreField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AgriFairConnect.API.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Municipality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<int>("WardNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AdminRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("AiScore")
                        .HasColumnType("numeric");

                    b.Property<string>("CitizenImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CropDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ExpectedBenefits")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FarmerAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FarmerEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FarmerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FarmerMunicipality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FarmerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FarmerPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("FarmerWard")
                        .HasColumnType("integer");

                    b.Property<int>("GrantId")
                        .HasColumnType("integer");

                    b.Property<bool>("HasReceivedGrantBefore")
                        .HasColumnType("boolean");

                    b.Property<string>("LandOwnershipUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("LandSize")
                        .HasColumnType("numeric");

                    b.Property<string>("LandSizeUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LandTaxUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("MonthlyIncome")
                        .HasColumnType("numeric");

                    b.Property<string>("PreviousGrantDetails")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("FarmerId");

                    b.HasIndex("GrantId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.ApplicationDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationDocuments");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.Crop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameNepali")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Crops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6108),
                            Description = "Staple food crop",
                            IsActive = true,
                            Name = "Rice",
                            NameNepali = "धान"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6112),
                            Description = "Maize crop",
                            IsActive = true,
                            Name = "Corn",
                            NameNepali = "मकै"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6113),
                            Description = "Wheat crop",
                            IsActive = true,
                            Name = "Wheat",
                            NameNepali = "गहुँ"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6114),
                            Description = "Barley crop",
                            IsActive = true,
                            Name = "Barley",
                            NameNepali = "जौ"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6115),
                            Description = "Potato crop",
                            IsActive = true,
                            Name = "Potato",
                            NameNepali = "आलु"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6116),
                            Description = "Onion crop",
                            IsActive = true,
                            Name = "Onion",
                            NameNepali = "प्याज"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6117),
                            Description = "Garlic crop",
                            IsActive = true,
                            Name = "Garlic",
                            NameNepali = "लसुन"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6118),
                            Description = "Cabbage crop",
                            IsActive = true,
                            Name = "Cabbage",
                            NameNepali = "बन्दाकोबी"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6119),
                            Description = "Cauliflower crop",
                            IsActive = true,
                            Name = "Cauliflower",
                            NameNepali = "काउली"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6120),
                            Description = "Tomato crop",
                            IsActive = true,
                            Name = "Tomato",
                            NameNepali = "टमाटर"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6120),
                            Description = "Chili crop",
                            IsActive = true,
                            Name = "Chili",
                            NameNepali = "खुर्सानी"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6121),
                            Description = "Eggplant crop",
                            IsActive = true,
                            Name = "Eggplant",
                            NameNepali = "भन्टा"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6122),
                            Description = "Bitter gourd crop",
                            IsActive = true,
                            Name = "Bitter Gourd",
                            NameNepali = "करेला"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6123),
                            Description = "Bottle gourd crop",
                            IsActive = true,
                            Name = "Bottle Gourd",
                            NameNepali = "लौका"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6124),
                            Description = "Okra crop",
                            IsActive = true,
                            Name = "Okra",
                            NameNepali = "फर्सी"
                        });
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.FarmerCrop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CropId")
                        .HasColumnType("integer");

                    b.Property<int>("FarmerProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CropId");

                    b.HasIndex("FarmerProfileId");

                    b.ToTable("FarmerCrops");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.FarmerDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<int>("FarmerProfileId")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FarmerProfileId");

                    b.ToTable("FarmerDocuments");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.FarmerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasReceivedGrantBefore")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LandSize")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("LandSizeUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("MonthlyIncome")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("FarmerProfiles");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.Grant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ObjectName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Grants");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.GrantTargetArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GrantId")
                        .HasColumnType("integer");

                    b.Property<string>("Municipality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("WardNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GrantId");

                    b.ToTable("GrantTargetAreas");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.MarketPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CropName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MarketPrices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CropName = "Rice",
                            IsActive = true,
                            Location = "काठमाडौं",
                            Price = 2500m,
                            Unit = "प्रति मुरी",
                            UpdatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6298),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 2,
                            CropName = "Corn",
                            IsActive = true,
                            Location = "काठमाडौं",
                            Price = 2200m,
                            Unit = "प्रति मुरी",
                            UpdatedAt = new DateTime(2025, 8, 30, 11, 52, 23, 847, DateTimeKind.Utc).AddTicks(6300),
                            UpdatedBy = "system"
                        });
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.Application", b =>
                {
                    b.HasOne("AgriFairConnect.API.Models.AppUser", "Farmer")
                        .WithMany("Applications")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgriFairConnect.API.Models.Grant", "Grant")
                        .WithMany("Applications")
                        .HasForeignKey("GrantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Farmer");

                    b.Navigation("Grant");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.ApplicationDocument", b =>
                {
                    b.HasOne("AgriFairConnect.API.Models.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.FarmerCrop", b =>
                {
                    b.HasOne("AgriFairConnect.API.Models.Crop", "Crop")
                        .WithMany("FarmerCrops")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgriFairConnect.API.Models.FarmerProfile", "FarmerProfile")
                        .WithMany("FarmerCrops")
                        .HasForeignKey("FarmerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("FarmerProfile");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.FarmerDocument", b =>
                {
                    b.HasOne("AgriFairConnect.API.Models.FarmerProfile", "FarmerProfile")
                        .WithMany("FarmerDocuments")
                        .HasForeignKey("FarmerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FarmerProfile");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.FarmerProfile", b =>
                {
                    b.HasOne("AgriFairConnect.API.Models.AppUser", "AppUser")
                        .WithOne("FarmerProfile")
                        .HasForeignKey("AgriFairConnect.API.Models.FarmerProfile", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.GrantTargetArea", b =>
                {
                    b.HasOne("AgriFairConnect.API.Models.Grant", "Grant")
                        .WithMany("GrantTargetAreas")
                        .HasForeignKey("GrantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grant");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.Notification", b =>
                {
                    b.HasOne("AgriFairConnect.API.Models.AppUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AgriFairConnect.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AgriFairConnect.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgriFairConnect.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AgriFairConnect.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.AppUser", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("FarmerProfile");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.Crop", b =>
                {
                    b.Navigation("FarmerCrops");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.FarmerProfile", b =>
                {
                    b.Navigation("FarmerCrops");

                    b.Navigation("FarmerDocuments");
                });

            modelBuilder.Entity("AgriFairConnect.API.Models.Grant", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("GrantTargetAreas");
                });
#pragma warning restore 612, 618
        }
    }
}
